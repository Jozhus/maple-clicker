{"version":3,"sources":["Game/StatWindow.tsx","constants/ExportedConstants.ts","Game/Monster.tsx","Game/Main.tsx","App.tsx","index.tsx"],"names":["StatWindow","name","this","props","charInfo","basicInfo","class","hp","hpCurr","hpMax","mp","mpCurr","mpMax","stats","Object","entries","forEach","stat","totalStat","values","formatBasicInfo","formatStats","map","ob","field","value","Row","className","key","uuid","toUpperCase","handle","style","position","createInfoRows","Component","monsterList","level","health","exp","physicalDefence","magicalDefence","pdr","attack","loot","image","dropTable","chance","amount","Monster","state","summonRandomMonster","setState","location","Math","floor","random","length","newHealth","getPlayerDamage","die","damagePlayer","type","item","console","log","onClick","takeDamage","src","Main","statWindowOpen","str","dex","int","luk","detailed","damage","calculateDamage","bind","prevStruct","newHp","Fragment","Button","dropLoot","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84423dd9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { IStatWindowProps } from \"../models/IStatWindowProps\";\r\nimport { Row } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/StatWindow.css\";\r\n\r\nclass StatWindow extends Component<IStatWindowProps, {}> {\r\n\r\n    private formatBasicInfo(): { [field: string]: string | number } {\r\n        const basicInfo: { [field: string]: string | number } = {\r\n            name: this.props.charInfo.basicInfo.name,\r\n            class: this.props.charInfo.basicInfo.class,\r\n            hp: `${this.props.charInfo.basicInfo.hpCurr} / ${this.props.charInfo.basicInfo.hpMax}`,\r\n            mp: `${this.props.charInfo.basicInfo.mpCurr} / ${this.props.charInfo.basicInfo.mpMax}`\r\n        };\r\n\r\n        return basicInfo;\r\n    }\r\n\r\n    private formatStats(): { [stat: string]: string } {\r\n        const stats: { [stat: string]: string } = {};\r\n        Object.entries(this.props.charInfo.stats).forEach(([stat, totalStat]: [string, number]) => {\r\n            stats[stat] = `${totalStat} (${totalStat}+0)`;\r\n        });\r\n\r\n        return stats;\r\n    }\r\n\r\n    private createInfoRows(): JSX.Element[][] {\r\n        return (\r\n            Object.values({ basicInfo: this.formatBasicInfo(), stats: this.formatStats() }).map((ob: { [key: string]: string | number }) => {\r\n                return Object.entries(ob).map(([field, value]: [string, any]) => {\r\n                    return (\r\n                        <Row className=\"infoRow\" key={uuid()}>\r\n                            <div className=\"fieldCol\" key={uuid()}>\r\n                                {field.toUpperCase()}\r\n                            </div>\r\n\r\n                            <div className=\"valueCol\" key={uuid()}>\r\n                                {value}\r\n                            </div>\r\n                        </Row>\r\n                    );\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <Draggable\r\n                //bounds=\"parent\"\r\n                handle=\".handle\"\r\n            >\r\n                <div\r\n                    className=\"StatWindow\"\r\n                    style={{ position: \"absolute\" }}\r\n                >\r\n                    <div className=\"handle noselect\">\r\n                        CHARACTER STAT\r\n                    </div>\r\n                    <div className=\"infoBox\">\r\n                        {this.createInfoRows()}\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nexport { StatWindow };","import { IMonsterList } from \"../models/IMonsterList\";\r\nimport { IDropTable } from \"../models/IDropTable\";\r\n\r\nconst monsterList: IMonsterList = {\r\n    \"Lith Harbor\": [\r\n        {\r\n            name: \"Snail\",\r\n            level: 1,\r\n            health: 15,\r\n            exp: 3,\r\n            physicalDefence: 0,\r\n            magicalDefence: 0,\r\n            pdr: 0.1,\r\n            attack: 2,\r\n            loot: [\r\n                \"common\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/6/6c/Mob_Snail.png\"\r\n        }\r\n    ],\r\n    \"Henesys\": [\r\n        {\r\n            name: \"Orange Mushroom\",\r\n            level: 10,\r\n            health: 187,\r\n            exp: 23,\r\n            physicalDefence: 0,\r\n            magicalDefence: 10,\r\n            pdr: 0.1,\r\n            attack: 10,\r\n            loot: [\r\n                \"common\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/0/02/Mob_Orange_Mushroom.png\"\r\n        },\r\n        {\r\n            name: \"Green Mushroom\",\r\n            level: 10,\r\n            health: 187,\r\n            exp: 23,\r\n            physicalDefence: 12,\r\n            magicalDefence: 40,\r\n            pdr: 0.05,\r\n            attack: 47,\r\n            loot: [\r\n                \"common\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/9/92/Mob_Green_Mushroom.png\"\r\n        },\r\n        {\r\n            name: \"Horny Mushroom\",\r\n            level: 12,\r\n            health: 262,\r\n            exp: 29,\r\n            physicalDefence: 30,\r\n            magicalDefence: 0,\r\n            pdr: 0.1,\r\n            attack: 51,\r\n            loot: [\r\n                \"common\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/3/3c/Mob_Horny_Mushroom.png\"\r\n        },\r\n        {\r\n            name: \"Blue Mushroom\",\r\n            level: 14,\r\n            health: 337,\r\n            exp: 33,\r\n            physicalDefence: 10,\r\n            magicalDefence: 60,\r\n            pdr: 0.1,\r\n            attack: 58,\r\n            loot: [\r\n                \"common\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/a/ad/Mob_Blue_Mushroom.png\"\r\n        }\r\n    ]\r\n};\r\n\r\nconst dropTable: IDropTable = {\r\n    \"common\": [\r\n        {\r\n            name: \"meso\",\r\n            chance: 0.5,\r\n            amount: 100\r\n        }\r\n    ]\r\n};\r\n\r\nexport { monsterList, dropTable };","import React, { Component } from \"react\";\r\nimport { IMonsterProps } from \"../models/IMonsterProps\";\r\nimport { IMonsterState } from \"../models/IMonsterState\";\r\nimport { ILoot } from \"../models/ILoot\";\r\nimport { monsterList, dropTable } from \"../constants/ExportedConstants\";\r\nimport \"../css/Monster.css\";\r\n\r\nclass Monster extends Component<IMonsterProps, IMonsterState> {\r\n    constructor(props: IMonsterProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            level: 0,\r\n            health: 0,\r\n            exp: 0,\r\n            physicalDefence: 0,\r\n            magicalDefence: 0,\r\n            pdr: 0,\r\n            attack: 0,\r\n            loot: [],\r\n            image: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    private summonRandomMonster(): void {\r\n        this.setState({ ...monsterList[this.props.location][Math.floor(Math.random() * monsterList[this.props.location].length)] });\r\n    }\r\n\r\n    private takeDamage(): void {\r\n        let newHealth: number = this.state.health - this.props.getPlayerDamage();\r\n        if (newHealth <= 0) {\r\n            this.setState({ health: 0 });\r\n            this.die();\r\n        } else {\r\n            this.setState({ health: newHealth });\r\n        }\r\n\r\n        this.props.damagePlayer(this.state.attack);\r\n    }\r\n\r\n    private die(): void {\r\n        this.state.loot.forEach((type: string) => {\r\n            dropTable[type].forEach((item: ILoot) => {\r\n                console.log(item.name);\r\n            });\r\n        }); // Drop random selection from loot table.\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div\r\n                className=\"Monster noselect\"\r\n                onClick={() => this.takeDamage()}\r\n            >\r\n                <div className=\"info\">\r\n                    {this.state.health}\r\n                </div>\r\n                <br />\r\n                <img\r\n                    className=\"image\"\r\n                    src={this.state.image}\r\n                />\r\n                <div className=\"info\">\r\n                    {this.state.name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Monster };","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { StatWindow } from \"./StatWindow\";\r\nimport { Monster } from \"./Monster\";\r\nimport { IMainState } from \"../models/IMainState\";\r\nimport \"../css/General.css\";\r\n\r\nclass Main extends Component<{}, IMainState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            statWindowOpen: false,\r\n            charInfo: {\r\n                basicInfo: {\r\n                    name: \"(You)\",\r\n                    class: \"Swordsman\",\r\n                    level: 1,\r\n                    hpMax: 1000,\r\n                    mpMax: 1000,\r\n                    hpCurr: 1000,\r\n                    mpCurr: 1000\r\n                },\r\n                stats: {\r\n                    str: 4,\r\n                    dex: 4,\r\n                    int: 4,\r\n                    luk: 4\r\n                },\r\n                detailed: {\r\n                    damage: \"54 ~ 54\"\r\n                }\r\n            }\r\n        };\r\n\r\n        this.calculateDamage = this.calculateDamage.bind(this);\r\n        this.takeDamage = this.takeDamage.bind(this);\r\n    }\r\n\r\n    private calculateDamage(/* Monster IED, def, etc.. */): number {\r\n        // Player damage calculations\r\n        return 50;\r\n    }\r\n\r\n    private takeDamage(damage: number): void {\r\n        // Damage calculations\r\n        const prevStruct: IMainState = { ...this.state };\r\n        let newHp: number = prevStruct.charInfo.basicInfo.hpCurr - damage;\r\n\r\n        if (newHp <= 0) {\r\n            newHp = 0;\r\n            this.die();\r\n        }\r\n\r\n        prevStruct.charInfo.basicInfo.hpCurr = newHp;\r\n\r\n        this.setState({ ...prevStruct });\r\n    }\r\n\r\n    private die(): void {\r\n        console.log(\"You died\");\r\n\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={() => { this.setState({ statWindowOpen: !this.state.statWindowOpen }) }}\r\n                >\r\n                    Stats\r\n                </Button>\r\n                {this.state.statWindowOpen ?\r\n                    <StatWindow\r\n                        charInfo={this.state.charInfo}\r\n                    /> : null\r\n                }\r\n                <Monster\r\n                    location={\"Henesys\"}\r\n                    dropLoot={() => { }}\r\n                    getPlayerDamage={this.calculateDamage}\r\n                    damagePlayer={this.takeDamage}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Main };","import \"bootstrap/dist/css/bootstrap.css\";\r\nimport React, { Component } from \"react\";\r\nimport { Main } from \"./Game/Main\";\r\n\r\nclass App extends Component {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Main />\r\n    );\r\n  }\r\n}\r\n\r\nexport { App };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}