{"version":3,"sources":["Game/StatWindow.tsx","Game/constants/Tables.ts","Game/constants/Chance.ts","Game/Monster.tsx","Game/ItemExaminer.tsx","Game/ItemSlot.tsx","Game/Battlefield.tsx","Game/helpers/generateItem.ts","Game/Main.tsx","App.tsx","index.tsx"],"names":["StatWindow","name","this","props","charInfo","basicInfo","class","hp","hpCurr","hpMax","mp","mpCurr","mpMax","stats","Object","entries","forEach","stat","totalStat","values","formatBasicInfo","formatStats","map","ob","field","value","Row","className","key","uuid","toUpperCase","handle","style","position","createInfoRows","Component","monsterTable","monster","dropTable","drops","itemList","items","chance","Chance","Monster","state","level","health","exp","physicalDefence","magicalDefence","pdr","attack","loot","image","summonRandomMonster","setState","monsterList","Math","floor","random","length","newHealth","getPlayerDamage","die","damagePlayer","type","item","weighted","dropLoot","integer","min","minAmount","max","maxAmount","onClick","takeDamage","src","alt","ItemExaminer","stars","maxStars","starString","repeat","replace","statList","baseStats","scrollBonuses","statKey","starBonuses","bonusString","valueString","statString","enhanceValue","totalValue","slice","drawStars","itemName","drawStats","ItemSlot","id","Fragment","data-tip","data-for","stackable","amount","Battlefield","groundLoot","renderedLoot","bind","Error","generateItem","err","console","error","prevGroundLoot","prevRenderedLoot","every","groundItem","index","push","location","itemSlot","Main","statWindowOpen","str","dex","int","luk","detailed","damage","calculateDamage","prevCharInfo","newHp","log","Button","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d478bff9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { IStatWindowProps } from \"./models/IStatWindowProps\";\r\nimport { Row } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/StatWindow.css\";\r\n\r\nclass StatWindow extends Component<IStatWindowProps, {}> {\r\n\r\n    private formatBasicInfo(): { [field: string]: string | number } {\r\n        const basicInfo: { [field: string]: string | number } = {\r\n            name: this.props.charInfo.basicInfo.name,\r\n            class: this.props.charInfo.basicInfo.class,\r\n            hp: `${this.props.charInfo.basicInfo.hpCurr} / ${this.props.charInfo.basicInfo.hpMax}`,\r\n            mp: `${this.props.charInfo.basicInfo.mpCurr} / ${this.props.charInfo.basicInfo.mpMax}`\r\n        };\r\n\r\n        return basicInfo;\r\n    }\r\n\r\n    private formatStats(): { [stat: string]: string } {\r\n        const stats: { [stat: string]: string } = {};\r\n        Object.entries(this.props.charInfo.stats).forEach(([stat, totalStat]: [string, number]) => {\r\n            stats[stat] = `${totalStat} (${totalStat}+0)`;\r\n        });\r\n\r\n        return stats;\r\n    }\r\n\r\n    private createInfoRows(): JSX.Element[][] {\r\n        return (\r\n            Object.values({ basicInfo: this.formatBasicInfo(), stats: this.formatStats() }).map((ob: { [key: string]: string | number }) => {\r\n                return Object.entries(ob).map(([field, value]: [string, any]) => {\r\n                    return (\r\n                        <Row className=\"infoRow\" key={uuid()}>\r\n                            <div className=\"fieldCol\" key={uuid()}>\r\n                                {field.toUpperCase()}\r\n                            </div>\r\n\r\n                            <div className=\"valueCol\" key={uuid()}>\r\n                                {value}\r\n                            </div>\r\n                        </Row>\r\n                    );\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <Draggable\r\n                //bounds=\"parent\"\r\n                handle=\".handle\"\r\n            >\r\n                <div\r\n                    className=\"StatWindow\"\r\n                    style={{ position: \"absolute\" }}\r\n                >\r\n                    <div className=\"handle noselect\">\r\n                        CHARACTER STAT\r\n                    </div>\r\n                    <div className=\"infoBox\">\r\n                        {this.createInfoRows()}\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n};\r\n\r\nexport { StatWindow };","import { IMonsterTable } from \"../models/IMonsterTable\";\r\nimport { IDropTable } from \"../models/IDropTable\";\r\nimport { IItemList } from \"../models/IItemList\";\r\nimport monster from \"./Monster.json\";\r\nimport drops from \"./Drops.json\";\r\nimport items from \"./Items.json\";\r\n\r\nconst monsterTable: IMonsterTable = monster;\r\nconst dropTable: IDropTable = drops;\r\nconst itemList: IItemList = items;\r\n\r\nexport { monsterTable, dropTable, itemList };","import { Chance } from \"chance\";\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\nexport { chance };","import React, { Component } from \"react\";\r\nimport { IMonsterProps } from \"./models/IMonsterProps\";\r\nimport { IMonsterState } from \"./models/IMonsterState\";\r\nimport { IDropProps } from \"./models/IDropProps\";\r\nimport { dropTable } from \"./constants/Tables\";\r\nimport { chance } from \"./constants/Chance\";\r\nimport \"../css/Monster.css\";\r\n\r\nclass Monster extends Component<IMonsterProps, IMonsterState> {\r\n    constructor(props: IMonsterProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            level: 0,\r\n            health: 0,\r\n            exp: 0,\r\n            physicalDefence: 0,\r\n            magicalDefence: 0,\r\n            pdr: 0,\r\n            attack: 0,\r\n            loot: [],\r\n            image: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    private summonRandomMonster(): void {\r\n        this.setState({ ...this.props.monsterList[Math.floor(Math.random() * this.props.monsterList.length)] });\r\n    }\r\n\r\n    private takeDamage(): void {\r\n        let newHealth: number = this.state.health - this.props.getPlayerDamage();\r\n        if (newHealth <= 0) {\r\n            this.setState({ health: 0 });\r\n            this.die();\r\n        } else {\r\n            this.setState({ health: newHealth });\r\n        }\r\n\r\n        this.props.damagePlayer(this.state.attack);\r\n    }\r\n\r\n    private die(): void {\r\n        this.state.loot.forEach((type: string) => {\r\n            dropTable[type].forEach((item: IDropProps) => {\r\n                if (chance.weighted([true, false], [item.chance, 1 - item.chance])) {\r\n                    this.props.dropLoot(item.name, chance.integer({ min: item.minAmount, max: item.maxAmount }));\r\n                }\r\n            });\r\n        });\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div\r\n                className=\"Monster noselect\"\r\n                onClick={() => this.takeDamage()}\r\n            >\r\n                <div className=\"info\">\r\n                    {this.state.health}\r\n                </div>\r\n                <br />\r\n                <img\r\n                    className=\"image\"\r\n                    src={this.state.image}\r\n                    alt={this.state.name}\r\n                />\r\n                <div className=\"info\">\r\n                    {this.state.name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Monster };","import React, { Component } from \"react\";\r\nimport { IItemExaminerProps } from \"./models/IItemExaminerProps\";\r\nimport { IEquipProps } from \"./models/IEquipProps\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/ItemExaminer.css\";\r\nimport { IStats } from \"./models/IStats\";\r\n\r\nclass ItemExaminer extends Component<IItemExaminerProps, {}> {\r\n    private drawStars(): JSX.Element | null {\r\n        if (this.props.item.type !== \"equipment\") {\r\n            return null;\r\n        }\r\n\r\n        const item: IEquipProps = this.props.item as IEquipProps;\r\n\r\n        const stars: number = item.stars;\r\n        const maxStars: number = item.maxStars;\r\n        let starString: string = ('★'.repeat(stars) + '☆'.repeat(maxStars - stars)).replace(/(.{5})/g, \"$1 \");\r\n\r\n        return (\r\n            <div className=\"itemStars\" key={uuid()}>\r\n                {starString}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private drawStats(): (JSX.Element | undefined)[] | null {\r\n        if (this.props.item.type !== \"equipment\") {\r\n            return null;\r\n        }\r\n\r\n        const item: IEquipProps = this.props.item as IEquipProps;\r\n\r\n        const statList: IStats = { ...item.baseStats };\r\n\r\n        if (item.scrollBonuses) {\r\n            Object.entries(item.scrollBonuses).forEach(([stat, value]: [string, number | undefined]) => {\r\n                const statKey: keyof typeof statList = stat as keyof typeof statList;\r\n                if (!statList[statKey]) {\r\n                    statList[statKey] = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (item.starBonuses) {\r\n            Object.entries(item.starBonuses).forEach(([stat, value]: [string, number | undefined]) => {\r\n                const statKey: keyof typeof statList = stat as keyof typeof statList;\r\n                if (!statList[statKey]) {\r\n                    statList[statKey] = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        return Object.entries(statList).map(([stat, value]: [string, number | undefined]) => {\r\n            let statString: string = stat;\r\n            let enhanceValue: number = 0;\r\n            let totalValue: number = value!;\r\n            let bonusString: string = \"\";\r\n            let valueString: string = \"\";\r\n\r\n            switch (stat) {\r\n                case \"str\":\r\n                case \"dex\":\r\n                case \"int\":\r\n                case \"luk\":\r\n                    statString = stat.toUpperCase();\r\n                    break;\r\n                case \"attk\":\r\n                    statString = \"Attack Power\";\r\n                    break;\r\n                case \"mattk\":\r\n                    statString = \"Magic Attack\";\r\n                    break;\r\n                case \"bossDamage\":\r\n                    statString = \"Boss Damage\";\r\n                    break;\r\n                case \"ied\":\r\n                    statString = \"Ignored Enemy DEF\";\r\n                    break;\r\n                default:\r\n                    statString = stat[0].toUpperCase() + stat.slice(1);\r\n            }\r\n\r\n            if (item.scrollBonuses && item.scrollBonuses[stat as keyof typeof item.scrollBonuses]) {\r\n                enhanceValue += item.scrollBonuses[stat as keyof typeof item.scrollBonuses];\r\n\r\n            }\r\n\r\n            if (item.starBonuses && item.starBonuses[stat as keyof typeof item.starBonuses]) {\r\n                enhanceValue += item.starBonuses[stat as keyof typeof item.starBonuses];\r\n            }\r\n\r\n            totalValue += enhanceValue;\r\n            bonusString = enhanceValue ? ` (${value} +${enhanceValue})` : '';\r\n\r\n            valueString = (stat === \"bossDamage\" || stat === \"ied\") ?\r\n                `${totalValue * 100}%${bonusString}` :\r\n                `${totalValue}${bonusString}`;\r\n\r\n            return (\r\n                <div className=\"itemExaminerStatInfo\" key={uuid()}>\r\n                    {`${statString}: +${valueString}`}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"itemExaminer\">\r\n                {this.drawStars()}\r\n                <div className=\"itemExaminerName\">\r\n                    • {this.props.item.itemName}\r\n                </div>\r\n                <hr />\r\n                <div\r\n                    className=\"itemExaminerImageContainer\"\r\n                //style={{ border: \"solid purple\" }}\r\n                >\r\n                    <img\r\n                        className=\"itemExaminerImage\"\r\n                        src={this.props.item.image}\r\n                        alt={this.props.item.itemName}\r\n                    />\r\n                </div>\r\n                <hr />\r\n                {this.drawStats()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ItemExaminer };","import React, { Component } from \"react\";\r\nimport { IItemSlotProps } from \"./models/IItemSlotProps\";\r\nimport { IItemSlotsState } from \"./models/IItemSlotsState\";\r\nimport ReactToolTip from \"react-tooltip\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { ItemExaminer } from \"./ItemExaminer\";\r\nimport \"../css/ItemSlot.css\";\r\nimport \"../css/Tooltip.css\";\r\n\r\nclass ItemSlot extends Component<IItemSlotProps, IItemSlotsState> {\r\n    constructor(props: IItemSlotProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: uuid()\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"itemBox\" data-tip data-for={this.state.id}>\r\n                    <div className=\"placementBox\">\r\n                        <img\r\n                            className=\"itemImage\"\r\n                            src={this.props.item.image}\r\n                            alt={this.props.item.itemName}\r\n                        />\r\n                    </div>\r\n                    {this.props.item.stackable ?\r\n                        <div className=\"placementBox\">\r\n                            <div className=\"itemAmount\">\r\n                                {this.props.item.amount}\r\n                            </div>\r\n                        </div> : null\r\n                    }\r\n                </div>\r\n                <ReactToolTip\r\n                    className=\"tooltip\"\r\n                    id={this.state.id}\r\n                >\r\n                    <ItemExaminer\r\n                        item={this.props.item}\r\n                    />\r\n                </ReactToolTip>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ItemSlot };","import React, { Component } from \"react\";\r\nimport { monsterTable } from \"./constants/Tables\";\r\nimport { Monster } from \"./Monster\";\r\nimport { IBattlefieldProps } from \"./models/IBattlefieldProps\";\r\nimport { IBattlefieldState } from \"./models/IBattlefieldState\";\r\nimport { IItemProps } from \"./models/IItemProps\";\r\nimport { generateItem } from \"./helpers/generateItem\";\r\nimport { ItemSlot } from \"./ItemSlot\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/Battlefield.css\";\r\n\r\nclass Battlefield extends Component<IBattlefieldProps, IBattlefieldState> {\r\n    constructor(props: IBattlefieldProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            groundLoot: [],\r\n            renderedLoot: []\r\n        };\r\n\r\n        this.dropLoot = this.dropLoot.bind(this);\r\n    }\r\n\r\n    private dropLoot(itemName: string, amount: number): void {\r\n        let item: IItemProps;\r\n\r\n        try {\r\n            item = generateItem(itemName, amount);\r\n        } catch (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n\r\n        let prevGroundLoot: IItemProps[] = this.state.groundLoot;\r\n        let prevRenderedLoot: JSX.Element[] = this.state.renderedLoot;\r\n\r\n        if (prevGroundLoot.every((groundItem: IItemProps, index: number) => {\r\n            if (item.stackable && groundItem.itemName === item.itemName) {\r\n                groundItem.amount += item.amount;\r\n                prevRenderedLoot[index] = <ItemSlot key={uuid()} item={groundItem} />;\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        })) {\r\n            prevGroundLoot.push(item);\r\n            prevRenderedLoot.push(<ItemSlot key={uuid()} item={item} />)\r\n        }\r\n\r\n        this.setState({ groundLoot: prevGroundLoot, renderedLoot: prevRenderedLoot });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Monster\r\n                    monsterList={monsterTable[this.props.location]}\r\n                    dropLoot={this.dropLoot}\r\n                    getPlayerDamage={this.props.getPlayerDamage}\r\n                    damagePlayer={this.props.damagePlayer}\r\n                />\r\n                <div className=\"ground noselect\">\r\n                    <div className=\"title\">\r\n                        {this.props.location}\r\n                    </div>\r\n                    {this.state.renderedLoot.map((itemSlot: JSX.Element) => itemSlot)}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Battlefield };","import { IItemProps } from \"../models/IItemProps\";\r\nimport { itemList } from \"../constants/Tables\";\r\n\r\nfunction generateItem(itemName: string, amount: number): IItemProps {\r\n    if (!(itemName in itemList)) {\r\n        throw new Error(`${itemName} does not exist.`);\r\n    } else if (amount < 1) {\r\n        throw new Error(`Invalid amount.`);\r\n    } else if (amount > 1 && !itemList[itemName].stackable) {\r\n        amount = 1;\r\n    }\r\n\r\n    return ({\r\n        ...itemList[itemName],\r\n        amount\r\n    });\r\n}\r\n\r\nexport { generateItem };","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { StatWindow } from \"./StatWindow\";\r\nimport { Battlefield } from \"./Battlefield\";\r\nimport { IMainState } from \"./models/IMainState\";\r\nimport { ICharInfo } from \"./models/ICharInfo\";\r\n\r\nclass Main extends Component<{}, IMainState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            statWindowOpen: false,\r\n            charInfo: {\r\n                basicInfo: {\r\n                    name: \"(You)\",\r\n                    class: \"Swordsman\",\r\n                    level: 1,\r\n                    hpMax: 1000,\r\n                    mpMax: 1000,\r\n                    hpCurr: 1000,\r\n                    mpCurr: 1000\r\n                },\r\n                stats: {\r\n                    str: 4,\r\n                    dex: 4,\r\n                    int: 4,\r\n                    luk: 4\r\n                },\r\n                detailed: {\r\n                    damage: \"54 ~ 54\"\r\n                }\r\n            }\r\n        };\r\n\r\n        this.calculateDamage = this.calculateDamage.bind(this);\r\n        this.takeDamage = this.takeDamage.bind(this);\r\n    }\r\n\r\n    private calculateDamage(/* Monster IED, def, etc.. */): number {\r\n        // Player damage calculations\r\n        return 50;\r\n    }\r\n\r\n    private takeDamage(damage: number): void {\r\n        // Damage calculations\r\n        const prevCharInfo: ICharInfo = { ...this.state.charInfo };\r\n        let newHp: number = prevCharInfo.basicInfo.hpCurr - damage;\r\n\r\n        if (newHp <= 0) {\r\n            newHp = 0;\r\n            this.die();\r\n        }\r\n\r\n        prevCharInfo.basicInfo.hpCurr = newHp;\r\n\r\n        this.setState({ charInfo: prevCharInfo });\r\n    }\r\n\r\n    private die(): void {\r\n        console.log(\"You died\");\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={() => { this.setState({ statWindowOpen: !this.state.statWindowOpen }) }}\r\n                >\r\n                    Stats\r\n                </Button>\r\n                {this.state.statWindowOpen ?\r\n                    <StatWindow\r\n                        charInfo={this.state.charInfo}\r\n                    /> : null\r\n                }\r\n                <Battlefield\r\n                    location=\"Henesys\"\r\n                    damagePlayer={this.takeDamage}\r\n                    getPlayerDamage={this.calculateDamage}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Main };","import React, { Component } from \"react\";\r\nimport { Main } from \"./Game/Main\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./css/General.css\";\r\n\r\nclass App extends Component {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Main />\r\n    );\r\n  }\r\n}\r\n\r\nexport { App };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}