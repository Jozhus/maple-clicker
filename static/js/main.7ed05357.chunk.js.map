{"version":3,"sources":["Game/StatWindow.tsx","Game/constants/Tables.ts","Game/constants/Chance.ts","Game/Monster.tsx","Game/ItemExaminer.tsx","Game/ItemSlot.tsx","Game/Battlefield.tsx","Game/helpers/generateItem.ts","Game/Main.tsx","App.tsx","index.tsx"],"names":["StatWindow","name","this","props","charInfo","basicInfo","class","hp","hpCurr","hpMax","mp","mpCurr","mpMax","stats","Object","entries","forEach","stat","totalStat","values","formatBasicInfo","formatStats","map","ob","field","value","Row","className","key","uuid","toUpperCase","handle","style","position","createInfoRows","Component","monsterTable","level","health","exp","physicalDefence","magicalDefence","pdr","attack","loot","image","dropTable","chance","minAmount","maxAmount","itemList","itemName","stackable","type","amount","sellPrice","levelReq","slots","stars","potentialTier","baseStats","defence","dex","luk","attk","bossDamage","ied","Chance","Monster","state","summonRandomMonster","setState","monsterList","Math","floor","random","length","newHealth","getPlayerDamage","die","damagePlayer","item","weighted","dropLoot","integer","min","max","onClick","takeDamage","src","alt","ItemExaminer","ItemSlot","id","Fragment","data-tip","data-for","Battlefield","groundLoot","bind","Error","generateItem","err","console","error","prevGroundLoot","every","groundItem","push","location","Main","statWindowOpen","str","int","detailed","damage","calculateDamage","prevCharInfo","newHp","log","Button","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ed05357.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { IStatWindowProps } from \"./models/IStatWindowProps\";\r\nimport { Row } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/StatWindow.css\";\r\n\r\nclass StatWindow extends Component<IStatWindowProps, {}> {\r\n\r\n    private formatBasicInfo(): { [field: string]: string | number } {\r\n        const basicInfo: { [field: string]: string | number } = {\r\n            name: this.props.charInfo.basicInfo.name,\r\n            class: this.props.charInfo.basicInfo.class,\r\n            hp: `${this.props.charInfo.basicInfo.hpCurr} / ${this.props.charInfo.basicInfo.hpMax}`,\r\n            mp: `${this.props.charInfo.basicInfo.mpCurr} / ${this.props.charInfo.basicInfo.mpMax}`\r\n        };\r\n\r\n        return basicInfo;\r\n    }\r\n\r\n    private formatStats(): { [stat: string]: string } {\r\n        const stats: { [stat: string]: string } = {};\r\n        Object.entries(this.props.charInfo.stats).forEach(([stat, totalStat]: [string, number]) => {\r\n            stats[stat] = `${totalStat} (${totalStat}+0)`;\r\n        });\r\n\r\n        return stats;\r\n    }\r\n\r\n    private createInfoRows(): JSX.Element[][] {\r\n        return (\r\n            Object.values({ basicInfo: this.formatBasicInfo(), stats: this.formatStats() }).map((ob: { [key: string]: string | number }) => {\r\n                return Object.entries(ob).map(([field, value]: [string, any]) => {\r\n                    return (\r\n                        <Row className=\"infoRow\" key={uuid()}>\r\n                            <div className=\"fieldCol\" key={uuid()}>\r\n                                {field.toUpperCase()}\r\n                            </div>\r\n\r\n                            <div className=\"valueCol\" key={uuid()}>\r\n                                {value}\r\n                            </div>\r\n                        </Row>\r\n                    );\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <Draggable\r\n                //bounds=\"parent\"\r\n                handle=\".handle\"\r\n            >\r\n                <div\r\n                    className=\"StatWindow\"\r\n                    style={{ position: \"absolute\" }}\r\n                >\r\n                    <div className=\"handle noselect\">\r\n                        CHARACTER STAT\r\n                    </div>\r\n                    <div className=\"infoBox\">\r\n                        {this.createInfoRows()}\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n};\r\n\r\nexport { StatWindow };","import { IMonsterTable } from \"../models/IMonsterTable\";\r\nimport { IDropTable } from \"../models/IDropTable\";\r\nimport { IItemList } from \"../models/IItemList\";\r\n\r\nconst monsterTable: IMonsterTable = {\r\n    \"Lith Harbor\": [\r\n        {\r\n            name: \"Snail\",\r\n            level: 1,\r\n            health: 15,\r\n            exp: 3,\r\n            physicalDefence: 0,\r\n            magicalDefence: 0,\r\n            pdr: 0.1,\r\n            attack: 2,\r\n            loot: [\r\n                \"common\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/6/6c/Mob_Snail.png\"\r\n        }\r\n    ],\r\n    \"Henesys\": [\r\n        {\r\n            name: \"Orange Mushroom\",\r\n            level: 10,\r\n            health: 187,\r\n            exp: 23,\r\n            physicalDefence: 0,\r\n            magicalDefence: 10,\r\n            pdr: 0.1,\r\n            attack: 10,\r\n            loot: [\r\n                \"common\",\r\n                \"low_level_gear\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/0/02/Mob_Orange_Mushroom.png\"\r\n        },\r\n        {\r\n            name: \"Green Mushroom\",\r\n            level: 10,\r\n            health: 187,\r\n            exp: 23,\r\n            physicalDefence: 12,\r\n            magicalDefence: 40,\r\n            pdr: 0.05,\r\n            attack: 47,\r\n            loot: [\r\n                \"common\",\r\n                \"low_level_gear\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/9/92/Mob_Green_Mushroom.png\"\r\n        },\r\n        {\r\n            name: \"Horny Mushroom\",\r\n            level: 12,\r\n            health: 262,\r\n            exp: 29,\r\n            physicalDefence: 30,\r\n            magicalDefence: 0,\r\n            pdr: 0.1,\r\n            attack: 51,\r\n            loot: [\r\n                \"common\",\r\n                \"low_level_gear\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/3/3c/Mob_Horny_Mushroom.png\"\r\n        },\r\n        {\r\n            name: \"Blue Mushroom\",\r\n            level: 14,\r\n            health: 337,\r\n            exp: 33,\r\n            physicalDefence: 10,\r\n            magicalDefence: 60,\r\n            pdr: 0.1,\r\n            attack: 58,\r\n            loot: [\r\n                \"common\",\r\n                \"low_level_gear\",\r\n                \"lol\"\r\n            ],\r\n            image: \"https://vignette.wikia.nocookie.net/maplestory/images/a/ad/Mob_Blue_Mushroom.png\"\r\n        }\r\n    ]\r\n};\r\n\r\nconst dropTable: IDropTable = {\r\n    \"common\": [\r\n        {\r\n            name: \"meso\",\r\n            chance: 0.5,\r\n            minAmount: 50,\r\n            maxAmount: 100\r\n        },\r\n        {\r\n            name: \"red_potion\",\r\n            chance: 0.3,\r\n            minAmount: 1,\r\n            maxAmount: 5\r\n        }\r\n    ],\r\n    \"low_level_gear\": [\r\n        {\r\n            name: \"wooden_buckler\",\r\n            chance: 0.1,\r\n            minAmount: 1,\r\n            maxAmount: 1\r\n        },\r\n        {\r\n            name: \"blue_cloth_pants\",\r\n            chance: 0.1,\r\n            minAmount: 1,\r\n            maxAmount: 1\r\n        },\r\n        {\r\n            name: \"green_ghetto_beanie\",\r\n            chance: 0.1,\r\n            minAmount: 1,\r\n            maxAmount: 1\r\n        },\r\n    ],\r\n    \"lol\": [\r\n        {\r\n            name: \"arcane_claw\",\r\n            chance: 0.5,\r\n            minAmount: 1,\r\n            maxAmount: 1\r\n        }\r\n    ]\r\n};\r\n\r\nconst itemList: IItemList = {\r\n    \"meso\": {\r\n        itemName: \"Meso\",\r\n        stackable: true,\r\n        type: \"other\",\r\n        amount: 0,\r\n        image: \"https://vignette.wikia.nocookie.net/cxzcxzcedfeqwfdew/images/0/0e/Meso_Coin.png\",\r\n        sellPrice: 1\r\n    },\r\n    \"red_potion\": {\r\n        itemName: \"Red Potion\",\r\n        stackable: true,\r\n        type: \"consumable\",\r\n        amount: 0,\r\n        image: \"https://vignette.wikia.nocookie.net/maplestory/images/c/cf/Use_Red_Potion.png\",\r\n        sellPrice: 3\r\n    },\r\n    \"wooden_buckler\": {\r\n        itemName: \"Wooden Buckler\",\r\n        stackable: false,\r\n        type: \"equipment\",\r\n        amount: 0,\r\n        image: \"https://vignette.wikia.nocookie.net/maplestory/images/5/58/Eqp_Wooden_Buckler.png\",\r\n        sellPrice: 400,\r\n        levelReq: 10,\r\n        slots: 7,\r\n        stars: 0,\r\n        potentialTier: \"none\",\r\n        baseStats: {\r\n            defence: 10\r\n        }\r\n    },\r\n    \"blue_cloth_pants\": {\r\n        itemName: \"Blue Cloth Pants\",\r\n        stackable: false,\r\n        type: \"equipment\",\r\n        amount: 0,\r\n        image: \"https://vignette.wikia.nocookie.net/maplestory/images/6/66/Eqp_Blue_Cloth_Pants_%28Male%29.png\",\r\n        sellPrice: 300,\r\n        levelReq: 10,\r\n        slots: 7,\r\n        stars: 0,\r\n        baseStats: {\r\n            defence: 9\r\n        }\r\n    },\r\n    \"green_ghetto_beanie\": {\r\n        itemName: \"Green Ghetto Beanie\",\r\n        stackable: false,\r\n        type: \"equipment\",\r\n        amount: 0,\r\n        image: \"https://vignette.wikia.nocookie.net/maplestory/images/b/b9/Eqp_Green_Ghetto_Beanie.png\",\r\n        sellPrice: 100,\r\n        levelReq: 10,\r\n        slots: 7,\r\n        stars: 0,\r\n        baseStats: {\r\n            defence: 9\r\n        }\r\n    },\r\n    \"arcane_claw\": {\r\n        itemName: \"Arcane Umbra Guards\",\r\n        stackable: false,\r\n        type: \"equipment\",\r\n        amount: 0,\r\n        image: \"https://vignette.wikia.nocookie.net/maplestory/images/6/67/Eqp_Arcane_Umbra_Guards.png\",\r\n        sellPrice: 1,\r\n        levelReq: 200,\r\n        slots: 8,\r\n        stars: 0,\r\n        baseStats: {\r\n            dex: 100,\r\n            luk: 100,\r\n            attk: 149,\r\n            bossDamage: 0.3,\r\n            ied: 0.2\r\n        }\r\n    }\r\n};\r\n\r\nexport { monsterTable, dropTable, itemList };","import { Chance } from \"chance\";\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\nexport { chance };","import React, { Component } from \"react\";\r\nimport { IMonsterProps } from \"./models/IMonsterProps\";\r\nimport { IMonsterState } from \"./models/IMonsterState\";\r\nimport { IDropProps } from \"./models/IDropProps\";\r\nimport { dropTable } from \"./constants/Tables\";\r\nimport { chance } from \"./constants/Chance\";\r\nimport \"../css/Monster.css\";\r\n\r\nclass Monster extends Component<IMonsterProps, IMonsterState> {\r\n    constructor(props: IMonsterProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            level: 0,\r\n            health: 0,\r\n            exp: 0,\r\n            physicalDefence: 0,\r\n            magicalDefence: 0,\r\n            pdr: 0,\r\n            attack: 0,\r\n            loot: [],\r\n            image: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    private summonRandomMonster(): void {\r\n        this.setState({ ...this.props.monsterList[Math.floor(Math.random() * this.props.monsterList.length)] });\r\n    }\r\n\r\n    private takeDamage(): void {\r\n        let newHealth: number = this.state.health - this.props.getPlayerDamage();\r\n        if (newHealth <= 0) {\r\n            this.setState({ health: 0 });\r\n            this.die();\r\n        } else {\r\n            this.setState({ health: newHealth });\r\n        }\r\n\r\n        this.props.damagePlayer(this.state.attack);\r\n    }\r\n\r\n    private die(): void {\r\n        this.state.loot.forEach((type: string) => {\r\n            dropTable[type].forEach((item: IDropProps) => {\r\n                if (chance.weighted([true, false], [item.chance, 1 - item.chance])) {\r\n                    this.props.dropLoot(item.name, chance.integer({ min: item.minAmount, max: item.maxAmount }));\r\n                }\r\n            });\r\n        });\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div\r\n                className=\"Monster noselect\"\r\n                onClick={() => this.takeDamage()}\r\n            >\r\n                <div className=\"info\">\r\n                    {this.state.health}\r\n                </div>\r\n                <br />\r\n                <img\r\n                    className=\"image\"\r\n                    src={this.state.image}\r\n                    alt={this.state.name}\r\n                />\r\n                <div className=\"info\">\r\n                    {this.state.name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Monster };","import React, { Component } from \"react\";\r\nimport { IItemExaminerProps } from \"./models/IItemExaminerProps\";\r\nimport { IEquipProps } from \"./models/IEquipProps\";\r\n\r\nclass ItemExaminer extends Component<IItemExaminerProps, {}> {\r\n    public render(): JSX.Element {\r\n\r\n        return (\r\n            <div className=\"itemExaminer\">\r\n                <div className=\"itemName\">\r\n                    {this.props.item.itemName}\r\n                </div>\r\n                <img\r\n                    className=\"itemImage\"\r\n                    src={this.props.item.image}\r\n                    alt={this.props.item.itemName}\r\n                />\r\n                {this.props.item.type === \"equipment\" ?\r\n                    Object.entries((this.props.item as IEquipProps).baseStats).map(([stat, amount]: [string, number | undefined]) => {\r\n                        return (\r\n                            <div>\r\n                                {stat}: {amount}\r\n                            </div>\r\n                        );\r\n                    }) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ItemExaminer };","import React, { Component } from \"react\";\r\nimport { IItemSlotProps } from \"./models/IItemSlotProps\";\r\nimport { IItemSlotsState } from \"./models/IItemSlotsState\";\r\nimport ReactToolTip from \"react-tooltip\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/ItemSlot.css\";\r\nimport { ItemExaminer } from \"./ItemExaminer\";\r\n\r\nclass ItemSlot extends Component<IItemSlotProps, IItemSlotsState> {\r\n    constructor(props: IItemSlotProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: uuid()\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"itemBox\" data-tip data-for={this.state.id}>\r\n                    <div className=\"placementBox\">\r\n                        <img\r\n                            className=\"itemImage\"\r\n                            src={this.props.item.image}\r\n                            alt={this.props.item.itemName}\r\n                        />\r\n                    </div>\r\n                    {this.props.item.stackable ?\r\n                        <div className=\"placementBox\">\r\n                            <div className=\"itemAmount\">\r\n                                {this.props.item.amount}\r\n                            </div>\r\n                        </div> : null\r\n                    }\r\n                </div>\r\n                <ReactToolTip\r\n                    id={this.state.id}\r\n                >\r\n                    <ItemExaminer\r\n                        item={this.props.item}\r\n                    />\r\n                </ReactToolTip>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ItemSlot };","import React, { Component } from \"react\";\r\nimport { monsterTable } from \"./constants/Tables\";\r\nimport { Monster } from \"./Monster\";\r\nimport { IBattlefieldProps } from \"./models/IBattlefieldProps\";\r\nimport { IBattlefieldState } from \"./models/IBattlefieldState\";\r\nimport { IItemProps } from \"./models/IItemProps\";\r\nimport { generateItem } from \"./helpers/generateItem\";\r\nimport { ItemSlot } from \"./ItemSlot\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/Battlefield.css\";\r\n\r\nclass Battlefield extends Component<IBattlefieldProps, IBattlefieldState> {\r\n    constructor(props: IBattlefieldProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            groundLoot: []\r\n        };\r\n\r\n        this.dropLoot = this.dropLoot.bind(this);\r\n    }\r\n\r\n    private dropLoot(itemName: string, amount: number): void {\r\n        let item: IItemProps;\r\n\r\n        try {\r\n            item = generateItem(itemName, amount);\r\n        } catch (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n\r\n        let prevGroundLoot: IItemProps[] = this.state.groundLoot;\r\n\r\n        if (prevGroundLoot.every((groundItem: IItemProps) => {\r\n            if (item.stackable && groundItem.itemName === item.itemName) {\r\n                groundItem.amount += item.amount;\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        })) {\r\n            prevGroundLoot.push(item);\r\n        }\r\n\r\n        this.setState({ groundLoot: prevGroundLoot });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Monster\r\n                    monsterList={monsterTable[this.props.location]}\r\n                    dropLoot={this.dropLoot}\r\n                    getPlayerDamage={this.props.getPlayerDamage}\r\n                    damagePlayer={this.props.damagePlayer}\r\n                />\r\n                <div className=\"ground noselect\">\r\n                    <div className=\"title\">\r\n                        {this.props.location}\r\n                    </div>\r\n                    {\r\n                        this.state.groundLoot.map((item: IItemProps) => {\r\n                            return <ItemSlot key={uuid()} item={item} />;\r\n                        })\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Battlefield };","import { IItemProps } from \"../models/IItemProps\";\r\nimport { itemList } from \"../constants/Tables\";\r\n\r\nfunction generateItem(itemName: string, amount: number): IItemProps {\r\n    if (!(itemName in itemList)) {\r\n        throw new Error(`${itemName} does not exist.`);\r\n    } else if (amount < 1) {\r\n        throw new Error(`Invalid amount.`);\r\n    } else if (amount > 1 && !itemList[itemName].stackable) {\r\n        amount = 1;\r\n    }\r\n\r\n    return ({\r\n        ...itemList[itemName],\r\n        amount\r\n    });\r\n}\r\n\r\nexport { generateItem };","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { StatWindow } from \"./StatWindow\";\r\nimport { Battlefield } from \"./Battlefield\";\r\nimport { IMainState } from \"./models/IMainState\";\r\nimport { ICharInfo } from \"./models/ICharInfo\";\r\n\r\nclass Main extends Component<{}, IMainState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            statWindowOpen: false,\r\n            charInfo: {\r\n                basicInfo: {\r\n                    name: \"(You)\",\r\n                    class: \"Swordsman\",\r\n                    level: 1,\r\n                    hpMax: 1000,\r\n                    mpMax: 1000,\r\n                    hpCurr: 1000,\r\n                    mpCurr: 1000\r\n                },\r\n                stats: {\r\n                    str: 4,\r\n                    dex: 4,\r\n                    int: 4,\r\n                    luk: 4\r\n                },\r\n                detailed: {\r\n                    damage: \"54 ~ 54\"\r\n                }\r\n            }\r\n        };\r\n\r\n        this.calculateDamage = this.calculateDamage.bind(this);\r\n        this.takeDamage = this.takeDamage.bind(this);\r\n    }\r\n\r\n    private calculateDamage(/* Monster IED, def, etc.. */): number {\r\n        // Player damage calculations\r\n        return 50;\r\n    }\r\n\r\n    private takeDamage(damage: number): void {\r\n        // Damage calculations\r\n        const prevCharInfo: ICharInfo = { ...this.state.charInfo };\r\n        let newHp: number = prevCharInfo.basicInfo.hpCurr - damage;\r\n\r\n        if (newHp <= 0) {\r\n            newHp = 0;\r\n            this.die();\r\n        }\r\n\r\n        prevCharInfo.basicInfo.hpCurr = newHp;\r\n\r\n        this.setState({ charInfo: prevCharInfo });\r\n    }\r\n\r\n    private die(): void {\r\n        console.log(\"You died\");\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={() => { this.setState({ statWindowOpen: !this.state.statWindowOpen }) }}\r\n                >\r\n                    Stats\r\n                </Button>\r\n                {this.state.statWindowOpen ?\r\n                    <StatWindow\r\n                        charInfo={this.state.charInfo}\r\n                    /> : null\r\n                }\r\n                <Battlefield\r\n                    location=\"Henesys\"\r\n                    damagePlayer={this.takeDamage}\r\n                    getPlayerDamage={this.calculateDamage}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Main };","import React, { Component } from \"react\";\r\nimport { Main } from \"./Game/Main\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./css/General.css\";\r\n\r\nclass App extends Component {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Main />\r\n    );\r\n  }\r\n}\r\n\r\nexport { App };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}