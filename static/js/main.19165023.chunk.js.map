{"version":3,"sources":["Game/StatWindow.tsx","Game/constants/Tables.ts","Game/constants/Chance.ts","Game/Monster.tsx","Game/helpers/generateItem.ts","Game/ItemExaminer.tsx","Game/ItemSlot.tsx","Game/Battlefield.tsx","Game/Inventory.tsx","Game/DataController.tsx","App.tsx","index.tsx"],"names":["StatWindow","name","this","props","basicInfo","class","hp","currHp","maxHp","mp","currMp","maxMp","stats","Object","entries","forEach","stat","totalStat","values","formatBasicInfo","formatStats","map","ob","field","value","Row","className","key","uuid","toUpperCase","handle","style","position","createInfoRows","Component","monsterTable","monster","dropTable","drops","itemList","items","chance","Chance","Monster","state","level","health","exp","physicalDefence","magicalDefence","pdr","attack","loot","image","summonRandomMonster","setState","monsterList","Math","floor","random","length","newHealth","getPlayerDamage","die","damagePlayer","type","item","weighted","dropLoot","integer","min","minAmount","max","maxAmount","onClick","takeDamage","src","alt","generateItem","itemName","amount","Error","stackable","ItemExaminer","fullStars","emptyStars","starCount","repeat","maxStars","replace","char","stars","statList","baseStats","scrollBonuses","statKey","starBonuses","valueString","statString","enhanceValue","totalValue","slice","drawStars","drawStats","ItemSlot","id","Fragment","data-tip","data-for","Battlefield","groundLoot","renderedLoot","bind","err","console","error","prevGroundLoot","prevRenderedLoot","every","groundItem","index","push","location","itemSlot","Inventory","selectedTab","Nav","tabs","NavItem","NavLink","TabContent","activeTab","TabPane","tabId","inventory","equips","DataController","str","dex","int","luk","detailed","damage","mesos","statWindowOpen","inventoryOpen","calculateDamage","newHp","log","Button","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19165023.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { IStatWindowProps } from \"./models/IStatWindowProps\";\r\nimport { Row } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/StatWindow.css\";\r\n\r\nclass StatWindow extends Component<IStatWindowProps, {}> {\r\n\r\n    private formatBasicInfo(): { [field: string]: string | number } {\r\n        return ({\r\n            name: this.props.basicInfo.name,\r\n            class: this.props.basicInfo.class,\r\n            hp: `${this.props.currHp} / ${this.props.basicInfo.maxHp}`,\r\n            mp: `${this.props.currMp} / ${this.props.basicInfo.maxMp}`\r\n        });\r\n    }\r\n\r\n    private formatStats(): { [stat: string]: string } {\r\n        const stats: { [stat: string]: string } = {};\r\n        Object.entries(this.props.stats).forEach(([stat, totalStat]: [string, number]) => {\r\n            stats[stat] = `${totalStat} (${totalStat}+0)`;\r\n        });\r\n\r\n        return stats;\r\n    }\r\n\r\n    private createInfoRows(): JSX.Element[][] {\r\n        return (\r\n            Object.values({ basicInfo: this.formatBasicInfo(), stats: this.formatStats() }).map((ob: { [key: string]: string | number }) => {\r\n                return Object.entries(ob).map(([field, value]: [string, any]) => {\r\n                    return (\r\n                        <Row className=\"infoRow\" key={uuid()}>\r\n                            <div className=\"fieldCol\" key={uuid()}>\r\n                                {field.toUpperCase()}\r\n                            </div>\r\n\r\n                            <div className=\"valueCol\" key={uuid()}>\r\n                                {value}\r\n                            </div>\r\n                        </Row>\r\n                    );\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <Draggable\r\n                //bounds=\"parent\"\r\n                handle=\".handle\"\r\n            >\r\n                <div\r\n                    className=\"window\"\r\n                    style={{ position: \"absolute\" }}\r\n                >\r\n                    <div className=\"handle noselect\">\r\n                        CHARACTER STAT\r\n                    </div>\r\n                    <div className=\"infoBox\">\r\n                        {this.createInfoRows()}\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n};\r\n\r\nexport { StatWindow };","import { IMonsterTable } from \"../models/IMonsterTable\";\r\nimport { IDropTable } from \"../models/IDropTable\";\r\nimport { IItemList } from \"../models/IItemList\";\r\nimport monster from \"./Monster.json\";\r\nimport drops from \"./Drops.json\";\r\nimport items from \"./Items.json\";\r\n\r\nconst monsterTable: IMonsterTable = monster;\r\nconst dropTable: IDropTable = drops;\r\nconst itemList: IItemList = items;\r\n\r\nexport { monsterTable, dropTable, itemList };","import { Chance } from \"chance\";\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\nexport { chance };","import React, { Component } from \"react\";\r\nimport { IMonsterProps } from \"./models/IMonsterProps\";\r\nimport { IMonsterState } from \"./models/IMonsterState\";\r\nimport { IDropProps } from \"./models/IDropProps\";\r\nimport { dropTable } from \"./constants/Tables\";\r\nimport { chance } from \"./constants/Chance\";\r\nimport \"../css/Monster.css\";\r\n\r\nclass Monster extends Component<IMonsterProps, IMonsterState> {\r\n    constructor(props: IMonsterProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            level: 0,\r\n            health: 0,\r\n            exp: 0,\r\n            physicalDefence: 0,\r\n            magicalDefence: 0,\r\n            pdr: 0,\r\n            attack: 0,\r\n            loot: [],\r\n            image: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    private summonRandomMonster(): void {\r\n        this.setState({ ...this.props.monsterList[Math.floor(Math.random() * this.props.monsterList.length)] });\r\n    }\r\n\r\n    private takeDamage(): void {\r\n        let newHealth: number = this.state.health - this.props.getPlayerDamage();\r\n        if (newHealth <= 0) {\r\n            this.setState({ health: 0 });\r\n            this.die();\r\n        } else {\r\n            this.setState({ health: newHealth });\r\n        }\r\n\r\n        this.props.damagePlayer(this.state.attack);\r\n    }\r\n\r\n    private die(): void {\r\n        this.state.loot.forEach((type: string) => {\r\n            dropTable[type].forEach((item: IDropProps) => {\r\n                if (chance.weighted([true, false], [item.chance, 1 - item.chance])) {\r\n                    this.props.dropLoot(item.name, chance.integer({ min: item.minAmount, max: item.maxAmount }));\r\n                }\r\n            });\r\n        });\r\n        this.summonRandomMonster();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div\r\n                className=\"Monster noselect\"\r\n                onClick={() => this.takeDamage()}\r\n            >\r\n                <div className=\"info\">\r\n                    {this.state.health}\r\n                </div>\r\n                <br />\r\n                <img\r\n                    className=\"image\"\r\n                    src={this.state.image}\r\n                    alt={this.state.name}\r\n                />\r\n                <div className=\"info\">\r\n                    {this.state.name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Monster };","import { IItemProps } from \"../models/IItemProps\";\r\nimport { itemList } from \"../constants/Tables\";\r\n\r\nfunction generateItem(itemName: string, amount: number): IItemProps {\r\n    if (!(itemName in itemList)) {\r\n        throw new Error(`${itemName} does not exist.`);\r\n    } else if (amount < 1) {\r\n        throw new Error(`Invalid amount.`);\r\n    } else if (amount > 1 && !itemList[itemName].stackable) {\r\n        amount = 1;\r\n    }\r\n\r\n    return ({\r\n        ...itemList[itemName],\r\n        amount\r\n    });\r\n}\r\n\r\nexport { generateItem };","import React, { Component } from \"react\";\r\nimport { IItemExaminerProps } from \"./models/IItemExaminerProps\";\r\nimport { IEquipProps } from \"./models/IEquipProps\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/ItemExaminer.css\";\r\nimport { IStats } from \"./models/IStats\";\r\n\r\nclass ItemExaminer extends Component<IItemExaminerProps, {}> {\r\n    private drawStars(): JSX.Element | null {\r\n        if (this.props.item.type !== \"equipment\") {\r\n            return null;\r\n        }\r\n\r\n        const item: IEquipProps = this.props.item as IEquipProps;\r\n\r\n        let fullStars: string = \"\";\r\n        let emptyStars: string = \"\";\r\n        let starCount: number = 0;\r\n        [...'★'.repeat(item.maxStars).replace(/(.{5})/g, \"$1 \")].forEach((char: string) => {\r\n            if (starCount < item.stars) {\r\n                fullStars += char;\r\n                starCount += char === '★' ? 1 : 0;\r\n            } else {\r\n                emptyStars += char;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className=\"itemStars\" key={uuid()}>\r\n                <span className=\"star full\">{fullStars}</span><span className=\"star empty\">{emptyStars}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private drawStats(): JSX.Element[] | null {\r\n        if (this.props.item.type !== \"equipment\") {\r\n            return null;\r\n        }\r\n\r\n        const item: IEquipProps = this.props.item as IEquipProps;\r\n\r\n        const statList: IStats = { ...item.baseStats };\r\n\r\n        if (item.scrollBonuses) {\r\n            Object.entries(item.scrollBonuses).forEach(([stat, value]: [string, number | undefined]) => {\r\n                const statKey: keyof typeof statList = stat as keyof typeof statList; // #JustTypescriptThings (I need to find a way to not have to do this.)\r\n                if (!statList[statKey]) {\r\n                    statList[statKey] = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (item.starBonuses) {\r\n            Object.entries(item.starBonuses).forEach(([stat, value]: [string, number | undefined]) => {\r\n                const statKey: keyof typeof statList = stat as keyof typeof statList;\r\n                if (!statList[statKey]) {\r\n                    statList[statKey] = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        return Object.entries(statList).map(([stat, value]: [string, number | undefined]) => {\r\n            let statString: string = stat;\r\n            let enhanceValue: number = 0;\r\n            let totalValue: number = value!;\r\n            let valueString: string = \"\";\r\n\r\n            switch (stat) {\r\n                case \"str\":\r\n                case \"dex\":\r\n                case \"int\":\r\n                case \"luk\":\r\n                    statString = stat.toUpperCase();\r\n                    break;\r\n                case \"attk\":\r\n                    statString = \"Attack Power\";\r\n                    break;\r\n                case \"mattk\":\r\n                    statString = \"Magic Attack\";\r\n                    break;\r\n                case \"bossDamage\":\r\n                    statString = \"Boss Damage\";\r\n                    break;\r\n                case \"ied\":\r\n                    statString = \"Ignored Enemy DEF\";\r\n                    break;\r\n                default:\r\n                    statString = stat[0].toUpperCase() + stat.slice(1);\r\n            }\r\n\r\n            if (item.scrollBonuses && item.scrollBonuses[stat as keyof typeof item.scrollBonuses]) {\r\n                enhanceValue += item.scrollBonuses[stat as keyof typeof item.scrollBonuses];\r\n\r\n            }\r\n\r\n            if (item.starBonuses && item.starBonuses[stat as keyof typeof item.starBonuses]) {\r\n                enhanceValue += item.starBonuses[stat as keyof typeof item.starBonuses];\r\n            }\r\n\r\n            totalValue += enhanceValue;\r\n\r\n            valueString = (stat === \"bossDamage\" || stat === \"ied\") ?\r\n                `${totalValue * 100}%` :\r\n                `${totalValue}`;\r\n\r\n            return (\r\n                <div className=\"itemExaminerStatInfo\" key={uuid()}>\r\n                    {value === totalValue ?\r\n                        <div>{statString}: +{valueString}</div> :\r\n                        <div>\r\n                            <span className=\"enhanced\">{statString}: +{totalValue} </span> ({value} <span className=\"enhanced\">+{enhanceValue}</span>)\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"itemExaminer\">\r\n                {this.drawStars()}\r\n                <div className=\"itemExaminerName\">\r\n                    • {this.props.item.itemName}\r\n                </div>\r\n                <hr />\r\n                <div\r\n                    className=\"itemExaminerImageContainer\"\r\n                //style={{ border: \"solid purple\" }}\r\n                >\r\n                    <img\r\n                        className=\"itemExaminerImage\"\r\n                        src={this.props.item.image}\r\n                        alt={this.props.item.itemName}\r\n                    />\r\n                </div>\r\n                <hr />\r\n                {this.drawStats()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ItemExaminer };","import React, { Component } from \"react\";\r\nimport { IItemSlotProps } from \"./models/IItemSlotProps\";\r\nimport { IItemSlotsState } from \"./models/IItemSlotsState\";\r\nimport ReactToolTip from \"react-tooltip\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { ItemExaminer } from \"./ItemExaminer\";\r\nimport \"../css/ItemSlot.css\";\r\nimport \"../css/Tooltip.css\";\r\n\r\nclass ItemSlot extends Component<IItemSlotProps, IItemSlotsState> {\r\n    constructor(props: IItemSlotProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: uuid()\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"itemBox\" data-tip data-for={this.state.id}>\r\n                    <div className=\"placementBox\">\r\n                        <img\r\n                            className=\"itemImage\"\r\n                            src={this.props.item.image}\r\n                            alt={this.props.item.itemName}\r\n                        />\r\n                    </div>\r\n                    {this.props.item.stackable ?\r\n                        <div className=\"placementBox\">\r\n                            <div className=\"itemAmount\">\r\n                                {this.props.item.amount}\r\n                            </div>\r\n                        </div> : null\r\n                    }\r\n                </div>\r\n                <ReactToolTip\r\n                    className=\"tooltip\"\r\n                    id={this.state.id}\r\n                >\r\n                    <ItemExaminer\r\n                        item={this.props.item}\r\n                    />\r\n                </ReactToolTip>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { ItemSlot };","import React, { Component } from \"react\";\r\nimport { monsterTable } from \"./constants/Tables\";\r\nimport { Monster } from \"./Monster\";\r\nimport { IBattlefieldProps } from \"./models/IBattlefieldProps\";\r\nimport { IBattlefieldState } from \"./models/IBattlefieldState\";\r\nimport { IItemProps } from \"./models/IItemProps\";\r\nimport { generateItem } from \"./helpers/generateItem\";\r\nimport { ItemSlot } from \"./ItemSlot\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"../css/Battlefield.css\";\r\n\r\nclass Battlefield extends Component<IBattlefieldProps, IBattlefieldState> {\r\n    constructor(props: IBattlefieldProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            groundLoot: [],\r\n            renderedLoot: []\r\n        };\r\n\r\n        this.dropLoot = this.dropLoot.bind(this);\r\n    }\r\n\r\n    private dropLoot(itemName: string, amount: number): void {\r\n        let item: IItemProps;\r\n\r\n        try {\r\n            item = generateItem(itemName, amount);\r\n        } catch (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n\r\n        let prevGroundLoot: IItemProps[] = this.state.groundLoot;\r\n        let prevRenderedLoot: JSX.Element[] = this.state.renderedLoot;\r\n\r\n        if (prevGroundLoot.every((groundItem: IItemProps, index: number) => {\r\n            if (item.stackable && groundItem.itemName === item.itemName) {\r\n                groundItem.amount += item.amount;\r\n                prevRenderedLoot[index] = <ItemSlot key={uuid()} item={groundItem} />;\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        })) {\r\n            prevGroundLoot.push(item);\r\n            prevRenderedLoot.push(<ItemSlot key={uuid()} item={item} />)\r\n        }\r\n\r\n        this.setState({ groundLoot: prevGroundLoot, renderedLoot: prevRenderedLoot });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Monster\r\n                    monsterList={monsterTable[this.props.location]}\r\n                    dropLoot={this.dropLoot}\r\n                    getPlayerDamage={this.props.getPlayerDamage}\r\n                    damagePlayer={this.props.damagePlayer}\r\n                />\r\n                <div className=\"ground noselect\">\r\n                    <div className=\"title\">\r\n                        {this.props.location}\r\n                    </div>\r\n                    {this.state.renderedLoot.map((itemSlot: JSX.Element) => itemSlot)}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Battlefield };","import React, { Component } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { Nav, NavItem, NavLink, TabPane, TabContent } from \"reactstrap\";\r\nimport { IInventoryState } from \"./models/IInventoryState\";\r\nimport \"../css/Inventory.css\";\r\nimport { IInventoryProps } from \"./models/IInventoryProps\";\r\nimport { IEquipProps } from \"./models/IEquipProps\";\r\nimport { ItemSlot } from \"./ItemSlot\";\r\n\r\nclass Inventory extends Component<IInventoryProps, IInventoryState> {\r\n    constructor(props: IInventoryProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTab: '1'\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <Draggable\r\n                //bounds=\"parent\"\r\n                handle=\".handle\"\r\n            >\r\n                <div\r\n                    className=\"window\"\r\n                    style={{ position: \"absolute\" }}\r\n                >\r\n                    <div className=\"handle noselect\">\r\n                        ITEM INVENTORY\r\n                    </div>\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink onClick={() => { this.setState({ selectedTab: '1' }) }}>\r\n                                EQUIP\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink onClick={() => { this.setState({ selectedTab: '2' }) }}>\r\n                                USE\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink onClick={() => { this.setState({ selectedTab: '3' }) }}>\r\n                                ETC\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.state.selectedTab}>\r\n                        <TabPane tabId='1'>\r\n                            {this.props.inventory.equips.map((item: IEquipProps) => {\r\n                                return (\r\n                                    <ItemSlot\r\n                                        item={item}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Inventory };","import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { StatWindow } from \"./StatWindow\";\r\nimport { Battlefield } from \"./Battlefield\";\r\nimport { IDataControllerState } from \"./models/IDataControllerState\";\r\nimport { Inventory } from \"./Inventory\";\r\nimport \"../css/Window.css\";\r\n\r\nimport { generateItem } from \"./helpers/generateItem\";\r\nimport { IEquipProps } from \"./models/IEquipProps\";\r\n\r\nclass DataController extends Component<{}, IDataControllerState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // Character information\r\n            currHp: 1000,\r\n            currMp: 1000,\r\n            basicInfo: {\r\n                name: \"(You)\",\r\n                class: \"Swordsman\",\r\n                level: 1,\r\n                maxHp: 1000,\r\n                maxMp: 1000\r\n            },\r\n            stats: {\r\n                str: 4,\r\n                dex: 4,\r\n                int: 4,\r\n                luk: 4\r\n            },\r\n            detailed: {\r\n                damage: \"54 ~ 54\"\r\n            },\r\n            inventory: {\r\n                mesos: 0,\r\n                equips: [\r\n                    generateItem(\"genesis_psy-limiter\", 1) as IEquipProps\r\n                ]\r\n            },\r\n\r\n            statWindowOpen: false,\r\n            inventoryOpen: false\r\n        };\r\n\r\n        this.calculateDamage = this.calculateDamage.bind(this);\r\n        this.takeDamage = this.takeDamage.bind(this);\r\n    }\r\n\r\n    private calculateDamage(/* Monster IED, def, etc.. */): number {\r\n        // Player damage calculations\r\n        return 107;\r\n    }\r\n\r\n    private takeDamage(damage: number): void {\r\n        // Damage calculations\r\n        let newHp: number = this.state.currHp - damage;\r\n\r\n        if (newHp <= 0) {\r\n            newHp = 0;\r\n            this.die();\r\n        }\r\n\r\n        this.setState({ currHp: newHp });\r\n    }\r\n\r\n    private die(): void {\r\n        console.log(\"You died\");\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Button\r\n                    onClick={() => { this.setState({ statWindowOpen: !this.state.statWindowOpen }) }}\r\n                >\r\n                    Stats\r\n                </Button>\r\n                <Button\r\n                    onClick={() => { this.setState({ inventoryOpen: !this.state.inventoryOpen }) }}\r\n                >\r\n                    Inventory\r\n                </Button>\r\n                {this.state.statWindowOpen ?\r\n                    <StatWindow\r\n                        currHp={this.state.currHp}\r\n                        currMp={this.state.currMp}\r\n                        basicInfo={this.state.basicInfo}\r\n                        stats={this.state.stats}\r\n                        detailed={this.state.detailed}\r\n                    /> : null\r\n                }\r\n                {this.state.inventoryOpen ?\r\n                    <Inventory\r\n                        inventory={this.state.inventory}\r\n                    /> : null\r\n                }\r\n                <Battlefield\r\n                    location=\"Henesys\"\r\n                    damagePlayer={this.takeDamage}\r\n                    getPlayerDamage={this.calculateDamage}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { DataController };","import React, { Component } from \"react\";\r\nimport { DataController } from \"./Game/DataController\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./css/General.css\";\r\n\r\nclass App extends Component {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <DataController />\r\n    );\r\n  }\r\n}\r\n\r\nexport { App };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}